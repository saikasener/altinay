# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moobot_pgv/pgv_scan_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pgv_scan_data(genpy.Message):
  _md5sum = "fb34df9bdee5103f0f83bb286c7a7b50"
  _type = "moobot_pgv/pgv_scan_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x_pos
float32 y_pos
float32 orientation
bool read_barcode
int32 tag_num
int32 lane_detected #0 when lane_detected"""
  __slots__ = ['x_pos','y_pos','orientation','read_barcode','tag_num','lane_detected']
  _slot_types = ['float32','float32','float32','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_pos,y_pos,orientation,read_barcode,tag_num,lane_detected

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pgv_scan_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x_pos is None:
        self.x_pos = 0.
      if self.y_pos is None:
        self.y_pos = 0.
      if self.orientation is None:
        self.orientation = 0.
      if self.read_barcode is None:
        self.read_barcode = False
      if self.tag_num is None:
        self.tag_num = 0
      if self.lane_detected is None:
        self.lane_detected = 0
    else:
      self.x_pos = 0.
      self.y_pos = 0.
      self.orientation = 0.
      self.read_barcode = False
      self.tag_num = 0
      self.lane_detected = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fB2i().pack(_x.x_pos, _x.y_pos, _x.orientation, _x.read_barcode, _x.tag_num, _x.lane_detected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.x_pos, _x.y_pos, _x.orientation, _x.read_barcode, _x.tag_num, _x.lane_detected,) = _get_struct_3fB2i().unpack(str[start:end])
      self.read_barcode = bool(self.read_barcode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fB2i().pack(_x.x_pos, _x.y_pos, _x.orientation, _x.read_barcode, _x.tag_num, _x.lane_detected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.x_pos, _x.y_pos, _x.orientation, _x.read_barcode, _x.tag_num, _x.lane_detected,) = _get_struct_3fB2i().unpack(str[start:end])
      self.read_barcode = bool(self.read_barcode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fB2i = None
def _get_struct_3fB2i():
    global _struct_3fB2i
    if _struct_3fB2i is None:
        _struct_3fB2i = struct.Struct("<3fB2i")
    return _struct_3fB2i
