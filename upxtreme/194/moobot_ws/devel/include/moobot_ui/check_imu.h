// Generated by gencpp from file moobot_ui/check_imu.msg
// DO NOT EDIT!


#ifndef MOOBOT_UI_MESSAGE_CHECK_IMU_H
#define MOOBOT_UI_MESSAGE_CHECK_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moobot_ui
{
template <class ContainerAllocator>
struct check_imu_
{
  typedef check_imu_<ContainerAllocator> Type;

  check_imu_()
    : angular_vel_z(0.0)
    , linear_acc_x(0.0)  {
    }
  check_imu_(const ContainerAllocator& _alloc)
    : angular_vel_z(0.0)
    , linear_acc_x(0.0)  {
  (void)_alloc;
    }



   typedef float _angular_vel_z_type;
  _angular_vel_z_type angular_vel_z;

   typedef float _linear_acc_x_type;
  _linear_acc_x_type linear_acc_x;





  typedef boost::shared_ptr< ::moobot_ui::check_imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moobot_ui::check_imu_<ContainerAllocator> const> ConstPtr;

}; // struct check_imu_

typedef ::moobot_ui::check_imu_<std::allocator<void> > check_imu;

typedef boost::shared_ptr< ::moobot_ui::check_imu > check_imuPtr;
typedef boost::shared_ptr< ::moobot_ui::check_imu const> check_imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moobot_ui::check_imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moobot_ui::check_imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moobot_ui::check_imu_<ContainerAllocator1> & lhs, const ::moobot_ui::check_imu_<ContainerAllocator2> & rhs)
{
  return lhs.angular_vel_z == rhs.angular_vel_z &&
    lhs.linear_acc_x == rhs.linear_acc_x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moobot_ui::check_imu_<ContainerAllocator1> & lhs, const ::moobot_ui::check_imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moobot_ui

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moobot_ui::check_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moobot_ui::check_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_ui::check_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_ui::check_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_ui::check_imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_ui::check_imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moobot_ui::check_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b1b998330ad15a2d1903c80d31c89e4";
  }

  static const char* value(const ::moobot_ui::check_imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b1b998330ad15a2ULL;
  static const uint64_t static_value2 = 0xd1903c80d31c89e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::moobot_ui::check_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moobot_ui/check_imu";
  }

  static const char* value(const ::moobot_ui::check_imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moobot_ui::check_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angular_vel_z\n"
"float32 linear_acc_x\n"
;
  }

  static const char* value(const ::moobot_ui::check_imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moobot_ui::check_imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angular_vel_z);
      stream.next(m.linear_acc_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct check_imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moobot_ui::check_imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moobot_ui::check_imu_<ContainerAllocator>& v)
  {
    s << indent << "angular_vel_z: ";
    Printer<float>::stream(s, indent + "  ", v.angular_vel_z);
    s << indent << "linear_acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.linear_acc_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOOBOT_UI_MESSAGE_CHECK_IMU_H
