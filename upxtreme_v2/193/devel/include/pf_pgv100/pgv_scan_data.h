// Generated by gencpp from file pf_pgv100/pgv_scan_data.msg
// DO NOT EDIT!


#ifndef PF_PGV100_MESSAGE_PGV_SCAN_DATA_H
#define PF_PGV100_MESSAGE_PGV_SCAN_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pf_pgv100
{
template <class ContainerAllocator>
struct pgv_scan_data_
{
  typedef pgv_scan_data_<ContainerAllocator> Type;

  pgv_scan_data_()
    : header()
    , angle(0.0)
    , x_pos(0.0)
    , y_pos(0.0)
    , direction()
    , color_lane_count(0)
    , no_color_lane(0)
    , no_pos(0)
    , tag_detected(0)
    , id(0)  {
    }
  pgv_scan_data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angle(0.0)
    , x_pos(0.0)
    , y_pos(0.0)
    , direction(_alloc)
    , color_lane_count(0)
    , no_color_lane(0)
    , no_pos(0)
    , tag_detected(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _x_pos_type;
  _x_pos_type x_pos;

   typedef float _y_pos_type;
  _y_pos_type y_pos;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _direction_type;
  _direction_type direction;

   typedef uint8_t _color_lane_count_type;
  _color_lane_count_type color_lane_count;

   typedef uint8_t _no_color_lane_type;
  _no_color_lane_type no_color_lane;

   typedef uint8_t _no_pos_type;
  _no_pos_type no_pos;

   typedef uint8_t _tag_detected_type;
  _tag_detected_type tag_detected;

   typedef uint8_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> const> ConstPtr;

}; // struct pgv_scan_data_

typedef ::pf_pgv100::pgv_scan_data_<std::allocator<void> > pgv_scan_data;

typedef boost::shared_ptr< ::pf_pgv100::pgv_scan_data > pgv_scan_dataPtr;
typedef boost::shared_ptr< ::pf_pgv100::pgv_scan_data const> pgv_scan_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pf_pgv100::pgv_scan_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pf_pgv100::pgv_scan_data_<ContainerAllocator1> & lhs, const ::pf_pgv100::pgv_scan_data_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.angle == rhs.angle &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.direction == rhs.direction &&
    lhs.color_lane_count == rhs.color_lane_count &&
    lhs.no_color_lane == rhs.no_color_lane &&
    lhs.no_pos == rhs.no_pos &&
    lhs.tag_detected == rhs.tag_detected &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pf_pgv100::pgv_scan_data_<ContainerAllocator1> & lhs, const ::pf_pgv100::pgv_scan_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pf_pgv100

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d3a20e54967aa3cdd07e4fe0a6961b2";
  }

  static const char* value(const ::pf_pgv100::pgv_scan_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d3a20e54967aa3cULL;
  static const uint64_t static_value2 = 0xdd07e4fe0a6961b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_pgv100/pgv_scan_data";
  }

  static const char* value(const ::pf_pgv100::pgv_scan_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 angle\n"
"float32 x_pos\n"
"float32 y_pos\n"
"string direction\n"
"uint8 color_lane_count\n"
"uint8 no_color_lane\n"
"uint8 no_pos\n"
"uint8 tag_detected\n"
"uint8 id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pf_pgv100::pgv_scan_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angle);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.direction);
      stream.next(m.color_lane_count);
      stream.next(m.no_color_lane);
      stream.next(m.no_pos);
      stream.next(m.tag_detected);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pgv_scan_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pf_pgv100::pgv_scan_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pf_pgv100::pgv_scan_data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "x_pos: ";
    Printer<float>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<float>::stream(s, indent + "  ", v.y_pos);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.direction);
    s << indent << "color_lane_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_lane_count);
    s << indent << "no_color_lane: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.no_color_lane);
    s << indent << "no_pos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.no_pos);
    s << indent << "tag_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_detected);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PF_PGV100_MESSAGE_PGV_SCAN_DATA_H
