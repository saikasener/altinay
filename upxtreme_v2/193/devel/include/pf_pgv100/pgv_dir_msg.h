// Generated by gencpp from file pf_pgv100/pgv_dir_msg.msg
// DO NOT EDIT!


#ifndef PF_PGV100_MESSAGE_PGV_DIR_MSG_H
#define PF_PGV100_MESSAGE_PGV_DIR_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pf_pgv100
{
template <class ContainerAllocator>
struct pgv_dir_msg_
{
  typedef pgv_dir_msg_<ContainerAllocator> Type;

  pgv_dir_msg_()
    : dir_command(0)  {
    }
  pgv_dir_msg_(const ContainerAllocator& _alloc)
    : dir_command(0)  {
  (void)_alloc;
    }



   typedef uint8_t _dir_command_type;
  _dir_command_type dir_command;





  typedef boost::shared_ptr< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> const> ConstPtr;

}; // struct pgv_dir_msg_

typedef ::pf_pgv100::pgv_dir_msg_<std::allocator<void> > pgv_dir_msg;

typedef boost::shared_ptr< ::pf_pgv100::pgv_dir_msg > pgv_dir_msgPtr;
typedef boost::shared_ptr< ::pf_pgv100::pgv_dir_msg const> pgv_dir_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator1> & lhs, const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator2> & rhs)
{
  return lhs.dir_command == rhs.dir_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator1> & lhs, const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pf_pgv100

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be420e78d04d79ee4d8fd23e20966af0";
  }

  static const char* value(const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe420e78d04d79eeULL;
  static const uint64_t static_value2 = 0x4d8fd23e20966af0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_pgv100/pgv_dir_msg";
  }

  static const char* value(const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 dir_command\n"
;
  }

  static const char* value(const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dir_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pgv_dir_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pf_pgv100::pgv_dir_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pf_pgv100::pgv_dir_msg_<ContainerAllocator>& v)
  {
    s << indent << "dir_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PF_PGV100_MESSAGE_PGV_DIR_MSG_H
