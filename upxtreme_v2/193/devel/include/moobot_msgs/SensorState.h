// Generated by gencpp from file moobot_msgs/SensorState.msg
// DO NOT EDIT!


#ifndef MOOBOT_MSGS_MESSAGE_SENSORSTATE_H
#define MOOBOT_MSGS_MESSAGE_SENSORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace moobot_msgs
{
template <class ContainerAllocator>
struct SensorState_
{
  typedef SensorState_<ContainerAllocator> Type;

  SensorState_()
    : header()
    , led(0)
    , left_encoder(0)
    , right_encoder(0)
    , battery(0.0)  {
    }
  SensorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , led(0)
    , left_encoder(0)
    , right_encoder(0)
    , battery(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _led_type;
  _led_type led;

   typedef int64_t _left_encoder_type;
  _left_encoder_type left_encoder;

   typedef int64_t _right_encoder_type;
  _right_encoder_type right_encoder;

   typedef float _battery_type;
  _battery_type battery;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_LEFT_MOTOR)
  #undef ERROR_LEFT_MOTOR
#endif
#if defined(_WIN32) && defined(ERROR_RIGHT_MOTOR)
  #undef ERROR_RIGHT_MOTOR
#endif
#if defined(_WIN32) && defined(TORQUE_ON)
  #undef TORQUE_ON
#endif
#if defined(_WIN32) && defined(TORQUE_OFF)
  #undef TORQUE_OFF
#endif

  enum {
    ERROR_LEFT_MOTOR = 1u,
    ERROR_RIGHT_MOTOR = 2u,
    TORQUE_ON = 1u,
    TORQUE_OFF = 2u,
  };


  typedef boost::shared_ptr< ::moobot_msgs::SensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moobot_msgs::SensorState_<ContainerAllocator> const> ConstPtr;

}; // struct SensorState_

typedef ::moobot_msgs::SensorState_<std::allocator<void> > SensorState;

typedef boost::shared_ptr< ::moobot_msgs::SensorState > SensorStatePtr;
typedef boost::shared_ptr< ::moobot_msgs::SensorState const> SensorStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moobot_msgs::SensorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moobot_msgs::SensorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moobot_msgs::SensorState_<ContainerAllocator1> & lhs, const ::moobot_msgs::SensorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.led == rhs.led &&
    lhs.left_encoder == rhs.left_encoder &&
    lhs.right_encoder == rhs.right_encoder &&
    lhs.battery == rhs.battery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moobot_msgs::SensorState_<ContainerAllocator1> & lhs, const ::moobot_msgs::SensorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moobot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moobot_msgs::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moobot_msgs::SensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_msgs::SensorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_msgs::SensorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_msgs::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_msgs::SensorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moobot_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84b397cf66be520b2eaf2f8ecf9e38be";
  }

  static const char* value(const ::moobot_msgs::SensorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84b397cf66be520bULL;
  static const uint64_t static_value2 = 0x2eaf2f8ecf9e38beULL;
};

template<class ContainerAllocator>
struct DataType< ::moobot_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moobot_msgs/SensorState";
  }

  static const char* value(const ::moobot_msgs::SensorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moobot_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Motor errors\n"
"uint8 ERROR_LEFT_MOTOR  = 1\n"
"uint8 ERROR_RIGHT_MOTOR = 2\n"
"\n"
"# Motor torque\n"
"uint8 TORQUE_ON  = 1\n"
"uint8 TORQUE_OFF = 2\n"
"\n"
"########################################\n"
"# Messages\n"
"########################################\n"
"Header  header\n"
"uint8   led\n"
"\n"
"int64  left_encoder    # (-2,147,483,648 ~ 2,147,483,647)\n"
"int64  right_encoder   # (-2,147,483,648 ~ 2,147,483,647)\n"
"#bool   torque\n"
"float32  battery\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::moobot_msgs::SensorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moobot_msgs::SensorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.led);
      stream.next(m.left_encoder);
      stream.next(m.right_encoder);
      stream.next(m.battery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moobot_msgs::SensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moobot_msgs::SensorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "led: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.led);
    s << indent << "left_encoder: ";
    Printer<int64_t>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<int64_t>::stream(s, indent + "  ", v.right_encoder);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOOBOT_MSGS_MESSAGE_SENSORSTATE_H
