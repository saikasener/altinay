// Generated by gencpp from file moobot_msgs/moobot_scanner.msg
// DO NOT EDIT!


#ifndef MOOBOT_MSGS_MESSAGE_MOOBOT_SCANNER_H
#define MOOBOT_MSGS_MESSAGE_MOOBOT_SCANNER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moobot_msgs
{
template <class ContainerAllocator>
struct moobot_scanner_
{
  typedef moobot_scanner_<ContainerAllocator> Type;

  moobot_scanner_()
    : fs_ossd(0)
    , fs_w1(0)
    , fs_w2(0)
    , bs_ossd(0)
    , bs_w1(0)
    , bs_w2(0)  {
    }
  moobot_scanner_(const ContainerAllocator& _alloc)
    : fs_ossd(0)
    , fs_w1(0)
    , fs_w2(0)
    , bs_ossd(0)
    , bs_w1(0)
    , bs_w2(0)  {
  (void)_alloc;
    }



   typedef int8_t _fs_ossd_type;
  _fs_ossd_type fs_ossd;

   typedef int8_t _fs_w1_type;
  _fs_w1_type fs_w1;

   typedef int8_t _fs_w2_type;
  _fs_w2_type fs_w2;

   typedef int8_t _bs_ossd_type;
  _bs_ossd_type bs_ossd;

   typedef int8_t _bs_w1_type;
  _bs_w1_type bs_w1;

   typedef int8_t _bs_w2_type;
  _bs_w2_type bs_w2;





  typedef boost::shared_ptr< ::moobot_msgs::moobot_scanner_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moobot_msgs::moobot_scanner_<ContainerAllocator> const> ConstPtr;

}; // struct moobot_scanner_

typedef ::moobot_msgs::moobot_scanner_<std::allocator<void> > moobot_scanner;

typedef boost::shared_ptr< ::moobot_msgs::moobot_scanner > moobot_scannerPtr;
typedef boost::shared_ptr< ::moobot_msgs::moobot_scanner const> moobot_scannerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moobot_msgs::moobot_scanner_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moobot_msgs::moobot_scanner_<ContainerAllocator1> & lhs, const ::moobot_msgs::moobot_scanner_<ContainerAllocator2> & rhs)
{
  return lhs.fs_ossd == rhs.fs_ossd &&
    lhs.fs_w1 == rhs.fs_w1 &&
    lhs.fs_w2 == rhs.fs_w2 &&
    lhs.bs_ossd == rhs.bs_ossd &&
    lhs.bs_w1 == rhs.bs_w1 &&
    lhs.bs_w2 == rhs.bs_w2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moobot_msgs::moobot_scanner_<ContainerAllocator1> & lhs, const ::moobot_msgs::moobot_scanner_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moobot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moobot_msgs::moobot_scanner_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_msgs::moobot_scanner_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_msgs::moobot_scanner_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b971113dac55cb95f6b07a91c6331c49";
  }

  static const char* value(const ::moobot_msgs::moobot_scanner_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb971113dac55cb95ULL;
  static const uint64_t static_value2 = 0xf6b07a91c6331c49ULL;
};

template<class ContainerAllocator>
struct DataType< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moobot_msgs/moobot_scanner";
  }

  static const char* value(const ::moobot_msgs::moobot_scanner_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte fs_ossd\n"
"byte fs_w1\n"
"byte fs_w2\n"
"byte bs_ossd\n"
"byte bs_w1\n"
"byte bs_w2\n"
;
  }

  static const char* value(const ::moobot_msgs::moobot_scanner_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fs_ossd);
      stream.next(m.fs_w1);
      stream.next(m.fs_w2);
      stream.next(m.bs_ossd);
      stream.next(m.bs_w1);
      stream.next(m.bs_w2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moobot_scanner_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moobot_msgs::moobot_scanner_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moobot_msgs::moobot_scanner_<ContainerAllocator>& v)
  {
    s << indent << "fs_ossd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fs_ossd);
    s << indent << "fs_w1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fs_w1);
    s << indent << "fs_w2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fs_w2);
    s << indent << "bs_ossd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bs_ossd);
    s << indent << "bs_w1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bs_w1);
    s << indent << "bs_w2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bs_w2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOOBOT_MSGS_MESSAGE_MOOBOT_SCANNER_H
