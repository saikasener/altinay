// Generated by gencpp from file moobot_pgv/pgv_scan_data.msg
// DO NOT EDIT!


#ifndef MOOBOT_PGV_MESSAGE_PGV_SCAN_DATA_H
#define MOOBOT_PGV_MESSAGE_PGV_SCAN_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moobot_pgv
{
template <class ContainerAllocator>
struct pgv_scan_data_
{
  typedef pgv_scan_data_<ContainerAllocator> Type;

  pgv_scan_data_()
    : x_pos(0.0)
    , y_pos(0.0)
    , orientation(0.0)
    , read_barcode(false)
    , tag_num(0)
    , lane_detected(0)  {
    }
  pgv_scan_data_(const ContainerAllocator& _alloc)
    : x_pos(0.0)
    , y_pos(0.0)
    , orientation(0.0)
    , read_barcode(false)
    , tag_num(0)
    , lane_detected(0)  {
  (void)_alloc;
    }



   typedef float _x_pos_type;
  _x_pos_type x_pos;

   typedef float _y_pos_type;
  _y_pos_type y_pos;

   typedef float _orientation_type;
  _orientation_type orientation;

   typedef uint8_t _read_barcode_type;
  _read_barcode_type read_barcode;

   typedef int32_t _tag_num_type;
  _tag_num_type tag_num;

   typedef int32_t _lane_detected_type;
  _lane_detected_type lane_detected;





  typedef boost::shared_ptr< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> const> ConstPtr;

}; // struct pgv_scan_data_

typedef ::moobot_pgv::pgv_scan_data_<std::allocator<void> > pgv_scan_data;

typedef boost::shared_ptr< ::moobot_pgv::pgv_scan_data > pgv_scan_dataPtr;
typedef boost::shared_ptr< ::moobot_pgv::pgv_scan_data const> pgv_scan_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moobot_pgv::pgv_scan_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moobot_pgv::pgv_scan_data_<ContainerAllocator1> & lhs, const ::moobot_pgv::pgv_scan_data_<ContainerAllocator2> & rhs)
{
  return lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.orientation == rhs.orientation &&
    lhs.read_barcode == rhs.read_barcode &&
    lhs.tag_num == rhs.tag_num &&
    lhs.lane_detected == rhs.lane_detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moobot_pgv::pgv_scan_data_<ContainerAllocator1> & lhs, const ::moobot_pgv::pgv_scan_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moobot_pgv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb34df9bdee5103f0f83bb286c7a7b50";
  }

  static const char* value(const ::moobot_pgv::pgv_scan_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb34df9bdee5103fULL;
  static const uint64_t static_value2 = 0x0f83bb286c7a7b50ULL;
};

template<class ContainerAllocator>
struct DataType< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moobot_pgv/pgv_scan_data";
  }

  static const char* value(const ::moobot_pgv::pgv_scan_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_pos\n"
"float32 y_pos\n"
"float32 orientation\n"
"bool read_barcode\n"
"int32 tag_num\n"
"int32 lane_detected #0 when lane_detected\n"
;
  }

  static const char* value(const ::moobot_pgv::pgv_scan_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.orientation);
      stream.next(m.read_barcode);
      stream.next(m.tag_num);
      stream.next(m.lane_detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pgv_scan_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moobot_pgv::pgv_scan_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moobot_pgv::pgv_scan_data_<ContainerAllocator>& v)
  {
    s << indent << "x_pos: ";
    Printer<float>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<float>::stream(s, indent + "  ", v.y_pos);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "read_barcode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.read_barcode);
    s << indent << "tag_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_num);
    s << indent << "lane_detected: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_detected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOOBOT_PGV_MESSAGE_PGV_SCAN_DATA_H
