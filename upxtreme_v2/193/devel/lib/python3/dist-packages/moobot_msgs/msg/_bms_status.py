# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moobot_msgs/bms_status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bms_status(genpy.Message):
  _md5sum = "08c0d01e45dd995f3adfffdf7aa31d50"
  _type = "moobot_msgs/bms_status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 battery_voltage  # Voltage in Volts 
float32 load_voltage  # Voltage in Volts 
float32 charger_voltage  # Voltage in Volts 
float32[] cell_voltage   # An array of individual cell voltages for each cell in the pack

float32 temperature_bms      # Temperature in Degrees Celsius (If unmeasured NaN)
float32[] temperature_cell  # An array of individual cell temperatures for each cell in the pack

float32 current_income     # Pile gelen akım      
float32 capacity           # Pilin doluluk kapasitesi -> Capacity in Ah (last full capacity) 
float32 capacity_max  	    # Pilin total kapasitesi -> Capacity in Ah (design capacity)  
float32 soc                # Charge percentage on 0 to 1 range -> percentage
float32 current_charger    # A     
float32 current_load       # Sistemin Çektiği Akım -> Negative when discharging (A)  

#float32 battery_volt_1
#float32 battery_volt_2
#float32 battery_volt_total
#float32 battery_temp_1
#float32 battery_temp_2
#float32 current_main
#float32 total_power_wh

"""
  __slots__ = ['battery_voltage','load_voltage','charger_voltage','cell_voltage','temperature_bms','temperature_cell','current_income','capacity','capacity_max','soc','current_charger','current_load']
  _slot_types = ['float32','float32','float32','float32[]','float32','float32[]','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       battery_voltage,load_voltage,charger_voltage,cell_voltage,temperature_bms,temperature_cell,current_income,capacity,capacity_max,soc,current_charger,current_load

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bms_status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.load_voltage is None:
        self.load_voltage = 0.
      if self.charger_voltage is None:
        self.charger_voltage = 0.
      if self.cell_voltage is None:
        self.cell_voltage = []
      if self.temperature_bms is None:
        self.temperature_bms = 0.
      if self.temperature_cell is None:
        self.temperature_cell = []
      if self.current_income is None:
        self.current_income = 0.
      if self.capacity is None:
        self.capacity = 0.
      if self.capacity_max is None:
        self.capacity_max = 0.
      if self.soc is None:
        self.soc = 0.
      if self.current_charger is None:
        self.current_charger = 0.
      if self.current_load is None:
        self.current_load = 0.
    else:
      self.battery_voltage = 0.
      self.load_voltage = 0.
      self.charger_voltage = 0.
      self.cell_voltage = []
      self.temperature_bms = 0.
      self.temperature_cell = []
      self.current_income = 0.
      self.capacity = 0.
      self.capacity_max = 0.
      self.soc = 0.
      self.current_charger = 0.
      self.current_load = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.battery_voltage, _x.load_voltage, _x.charger_voltage))
      length = len(self.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cell_voltage))
      _x = self.temperature_bms
      buff.write(_get_struct_f().pack(_x))
      length = len(self.temperature_cell)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.temperature_cell))
      _x = self
      buff.write(_get_struct_6f().pack(_x.current_income, _x.capacity, _x.capacity_max, _x.soc, _x.current_charger, _x.current_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.battery_voltage, _x.load_voltage, _x.charger_voltage,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cell_voltage = s.unpack(str[start:end])
      start = end
      end += 4
      (self.temperature_bms,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.temperature_cell = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.current_income, _x.capacity, _x.capacity_max, _x.soc, _x.current_charger, _x.current_load,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.battery_voltage, _x.load_voltage, _x.charger_voltage))
      length = len(self.cell_voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cell_voltage.tostring())
      _x = self.temperature_bms
      buff.write(_get_struct_f().pack(_x))
      length = len(self.temperature_cell)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.temperature_cell.tostring())
      _x = self
      buff.write(_get_struct_6f().pack(_x.current_income, _x.capacity, _x.capacity_max, _x.soc, _x.current_charger, _x.current_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.battery_voltage, _x.load_voltage, _x.charger_voltage,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cell_voltage = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.temperature_bms,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.temperature_cell = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 24
      (_x.current_income, _x.capacity, _x.capacity_max, _x.soc, _x.current_charger, _x.current_load,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
