// Generated by gencpp from file moobot_msgs/moobot_status.msg
// DO NOT EDIT!


#ifndef MOOBOT_MSGS_MESSAGE_MOOBOT_STATUS_H
#define MOOBOT_MSGS_MESSAGE_MOOBOT_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moobot_msgs
{
template <class ContainerAllocator>
struct moobot_status_
{
  typedef moobot_status_<ContainerAllocator> Type;

  moobot_status_()
    : agv_mode(0)
    , agv_stopped(false)
    , emergency(false)
    , fault(false)
    , job()  {
    }
  moobot_status_(const ContainerAllocator& _alloc)
    : agv_mode(0)
    , agv_stopped(false)
    , emergency(false)
    , fault(false)
    , job(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _agv_mode_type;
  _agv_mode_type agv_mode;

   typedef uint8_t _agv_stopped_type;
  _agv_stopped_type agv_stopped;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _fault_type;
  _fault_type fault;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _job_type;
  _job_type job;





  typedef boost::shared_ptr< ::moobot_msgs::moobot_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moobot_msgs::moobot_status_<ContainerAllocator> const> ConstPtr;

}; // struct moobot_status_

typedef ::moobot_msgs::moobot_status_<std::allocator<void> > moobot_status;

typedef boost::shared_ptr< ::moobot_msgs::moobot_status > moobot_statusPtr;
typedef boost::shared_ptr< ::moobot_msgs::moobot_status const> moobot_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moobot_msgs::moobot_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moobot_msgs::moobot_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moobot_msgs::moobot_status_<ContainerAllocator1> & lhs, const ::moobot_msgs::moobot_status_<ContainerAllocator2> & rhs)
{
  return lhs.agv_mode == rhs.agv_mode &&
    lhs.agv_stopped == rhs.agv_stopped &&
    lhs.emergency == rhs.emergency &&
    lhs.fault == rhs.fault &&
    lhs.job == rhs.job;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moobot_msgs::moobot_status_<ContainerAllocator1> & lhs, const ::moobot_msgs::moobot_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moobot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moobot_msgs::moobot_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moobot_msgs::moobot_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_msgs::moobot_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moobot_msgs::moobot_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_msgs::moobot_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moobot_msgs::moobot_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moobot_msgs::moobot_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ac369f66a5b4dcf60abbe45c6d5c34f";
  }

  static const char* value(const ::moobot_msgs::moobot_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ac369f66a5b4dcfULL;
  static const uint64_t static_value2 = 0x60abbe45c6d5c34fULL;
};

template<class ContainerAllocator>
struct DataType< ::moobot_msgs::moobot_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moobot_msgs/moobot_status";
  }

  static const char* value(const ::moobot_msgs::moobot_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moobot_msgs::moobot_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 agv_mode\n"
"bool agv_stopped\n"
"bool emergency\n"
"bool fault\n"
"string job\n"
;
  }

  static const char* value(const ::moobot_msgs::moobot_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moobot_msgs::moobot_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agv_mode);
      stream.next(m.agv_stopped);
      stream.next(m.emergency);
      stream.next(m.fault);
      stream.next(m.job);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moobot_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moobot_msgs::moobot_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moobot_msgs::moobot_status_<ContainerAllocator>& v)
  {
    s << indent << "agv_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.agv_mode);
    s << indent << "agv_stopped: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agv_stopped);
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault);
    s << indent << "job: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.job);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOOBOT_MSGS_MESSAGE_MOOBOT_STATUS_H
